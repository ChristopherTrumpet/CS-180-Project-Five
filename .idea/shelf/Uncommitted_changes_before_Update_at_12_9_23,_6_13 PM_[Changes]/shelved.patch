Index: Marketplace/Client-Side/src/SellerPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport javax.swing.*;\nimport javax.swing.event.CellEditorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.TableModelEvent;\nimport javax.swing.event.TableModelListener;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.table.TableColumnModel;\nimport javax.swing.table.TableModel;\nimport javax.swing.table.TableRowSorter;\nimport java.awt.*;\nimport java.util.List;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.ArrayList;\nimport java.util.Objects;\n\npublic class SellerPage extends JFrame {\n    CardLayout cardLayout = new CardLayout();\n    Container container = new Container();\n    JFrame reference;\n    JTable table;\n    JSONObject seller;\n\n    public SellerPage(JSONObject seller) {\n\n        this.seller = seller;\n        this.reference = this;\n\n        // Set title of window\n        this.setTitle(\"Purdue Marketplace (SELLER)\");\n\n        // Set behavior to \"destroy\" window when closed\n        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n        // Set dimensions of application\n        this.setSize(800, 500);\n\n        // Does not allow user to resize window\n        this.setResizable(false);\n\n        // Set window to open in the center of the screen\n        this.setLocationRelativeTo(null);\n\n        this.setLayout(new BorderLayout());\n\n        JPanel sidePanel = SidePanel();\n\n        container.setLayout(cardLayout);\n        container.add(\"stores\", Stores());\n        container.add(\"settings\", settings(sidePanel));\n        container.add(\"statistics\", statistics());\n        container.setVisible(true);\n\n\n        this.add(sidePanel, BorderLayout.WEST);\n        this.add(container, BorderLayout.CENTER);\n        this.setVisible(true);\n    }\n\n    public JPanel SidePanel() {\n\n        JPanel panel = new JPanel();\n        GridBagLayout gridLayout = new GridBagLayout();\n        GridBagConstraints c = new GridBagConstraints();\n        c.insets = new Insets(0,80,0,24);\n        c.fill = GridBagConstraints.HORIZONTAL;\n        c.anchor = GridBagConstraints.NORTH;\n        panel.setLayout(gridLayout);\n\n        JLabel welcomeMessage = new JLabel(\"Purdue Marketplace\");\n        welcomeMessage.setFont(new Font(\"serif\", Font.BOLD, 18));\n        c.gridy = 0;\n        c.gridwidth = 4;\n        gridLayout.setConstraints(welcomeMessage, c);\n        panel.add(welcomeMessage);\n\n        c.insets = new Insets(0,80,8,24);\n\n        JTextArea nameMessage = new JTextArea(\"Hey, \" + seller.getString(\"username\"));\n        nameMessage.setFont(new Font(\"sans-serif\", Font.PLAIN, 14));\n        nameMessage.setLineWrap(true);\n        nameMessage.setWrapStyleWord(true);\n        nameMessage.setFocusable(false);\n        nameMessage.setEditable(false);\n        nameMessage.setOpaque(false);\n        c.gridy = 1;\n        c.gridwidth = 4;\n        gridLayout.setConstraints(nameMessage,c);\n        panel.add(nameMessage);\n\n        c.insets = new Insets(4,80,4,24);\n\n        JButton storesButton = new JButton(\"Stores\");\n        storesButton.addActionListener(e -> cardLayout.show(container, \"stores\"));\n        c.gridy = 2;\n        c.gridwidth = 4;\n        gridLayout.setConstraints(storesButton, c);\n        panel.add(storesButton);\n\n        JButton settingsButton = new JButton(\"Settings\");\n        settingsButton.addActionListener(e -> cardLayout.show(container, \"settings\"));\n        c.gridy = 3;\n        c.gridwidth = 4;\n        gridLayout.setConstraints(settingsButton, c);\n        panel.add(settingsButton);\n\n        JButton statisticsButton = new JButton(\"Statistics\");\n        statisticsButton.addActionListener(e -> cardLayout.show(container, \"statistics\"));\n        c.gridy = 4;\n        c.gridwidth = 4;\n        gridLayout.setConstraints(statisticsButton, c);\n        panel.add(statisticsButton);\n\n        JButton importProductsButton = new JButton(\"Import Products\");\n        importProductsButton.addActionListener(e -> {\n            JFileChooser chooser = new JFileChooser();\n            FileNameExtensionFilter filter = new FileNameExtensionFilter(\".csv\", \"csv\");\n            chooser.setFileFilter(filter);\n            chooser.showOpenDialog(null);\n\n            if (chooser.getSelectedFile() != null) {\n                ArrayList<String> data = new ArrayList<>();\n                data.add(\"[importProducts]\");\n                data.add(seller.toString());\n                data.add(chooser.getSelectedFile().getAbsolutePath());\n                Client.sendToServer(data);\n\n                ArrayList<String> userData = new ArrayList<>();\n                userData.add(\"[getUser]\");\n                userData.add(seller.getString(\"id\"));\n                Client.sendToServer(userData);\n                String userString = Client.readFromServer(1).get(0);\n                this.seller = new JSONObject(userString);\n\n                container.remove(Stores());\n                container.add(\"stores\", Stores());\n                cardLayout.show(container, \"stores\");\n                JOptionPane.showMessageDialog (null, \"Imported Products successfully!\", \"Product Imports\", JOptionPane.INFORMATION_MESSAGE);\n\n            }\n        });\n        c.gridy = 5;\n        c.gridwidth = 4;\n        gridLayout.setConstraints(importProductsButton, c);\n        panel.add(importProductsButton);\n\n        JButton logoutButton = new JButton(\"Logout\");\n        logoutButton.addActionListener(e -> {\n            int input = JOptionPane.showConfirmDialog(null, \"Are you sure you want to logout\");\n            if (input == 0) {\n                reference.dispose();\n                new OnboardingPage(true);\n            }\n        });\n        c.gridy = 6;\n        c.gridwidth = 2;\n        c.gridx = 0;\n        c.insets = new Insets(4,80,4,4);\n        gridLayout.setConstraints(logoutButton, c);\n        panel.add(logoutButton);\n\n        JButton exitButton = new JButton(\"Exit\");\n        exitButton.addActionListener(e -> {\n            int input = JOptionPane.showConfirmDialog(null, \"Are you sure you want to exit\");\n            if (input == 0) {\n                reference.dispose();\n            }\n        });\n        c.gridy = 6;\n        c.gridx = 2;\n        c.gridwidth = 2;\n        c.insets = new Insets(4,4,4,24);\n        gridLayout.setConstraints(exitButton, c);\n        panel.add(exitButton);\n\n        return panel;\n    }\n\n    public JPanel Stores() {\n        JPanel panel = new JPanel(new BorderLayout());\n        JPanel storesPanel = new JPanel();\n        storesPanel.setLayout(null);\n\n        JLabel storesLabel = new JLabel(\"Your Stores\");\n        storesLabel.setFont(new Font(\"Serif\", Font.BOLD, 18));\n        storesLabel.setBounds(24, 16, 400, 24);\n\n        JLabel helpfulLabel = new JLabel(\"Select a store to view\");\n        helpfulLabel.setFont(new Font(\"serif\", Font.PLAIN, 14));\n        helpfulLabel.setBounds(24, 36, 400, 24);\n\n        // Create a DefaultTableModel\n        DefaultTableModel model = new DefaultTableModel();\n\n        // Add some data to the model\n        model.addColumn(\"Stores\");\n        model.addColumn(\"Sales\");\n        model.addColumn(\"Id\");\n\n        JSONArray stores = seller.getJSONArray(\"stores\");\n\n        Client.sendToServer(new ArrayList<>(List.of(\"[getStores]\")));\n\n        String allStoresString = Client.readFromServer(1).get(0);\n\n        if (allStoresString.equals(\"empty\"))\n            System.out.println(\"User has no stores\");\n        else {\n            JSONArray allStores = new JSONArray(allStoresString);\n            for (Object storeGeneric : allStores) {\n                JSONObject storeGenericObj = (JSONObject) storeGeneric;\n                String storeGenericId = storeGenericObj.getString(\"id\");\n\n                for (Object store : stores) {\n                    String storeId = (String) store;\n\n                    if (storeId.equals(storeGenericId)) {\n                        boolean storeExists = false;\n                        for (int i = 0; i < model.getRowCount(); i++) {\n                            if (model.getValueAt(i, 0).equals(storeGenericObj.getString(\"name\"))) {\n                                storeExists = true;\n                            }\n                        }\n                        if (!storeExists)\n                            model.addRow(new Object[]{storeGenericObj.getString(\"name\"), storeGenericObj.getDouble(\"sales\"), storeGenericObj.toString()});\n                    }\n                }\n            }\n        }\n\n        // Create a JTable using the model\n        table = new JTable(model);\n\n        for (int c = 0; c < table.getColumnCount(); c++)\n        {\n            Class<?> col_class = table.getColumnClass(c);\n            table.setDefaultEditor(col_class, null);        // remove editor\n        }\n\n        table.addMouseListener(new MouseAdapter() {\n            public void mousePressed(MouseEvent mouseEvent) {\n                JTable table =(JTable) mouseEvent.getSource();\n                if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {\n                    ArrayList<String> data = new ArrayList<>();\n                    data.add(\"[getStore]\");\n                    data.add(new JSONObject(table.getModel().getValueAt(table.getSelectedRow(), 2).toString()).getString(\"id\"));\n                    Client.sendToServer(data);\n                    JSONObject store = new JSONObject(Client.readFromServer(1).get(0));\n                    editStore(store);\n                }\n            }\n        });\n\n        TableRowSorter<TableModel> sorter = new TableRowSorter<>(table.getModel());\n        table.setRowSorter(sorter);\n\n        // SORTING BROKEN FIX THIS LATER\n//        List<RowSorter.SortKey> sortKeys = new ArrayList<>();\n//        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));\n//        sorter.setSortKeys(sortKeys);\n\n        TableColumnModel tcm = table.getColumnModel();\n        tcm.removeColumn( tcm.getColumn(2) );\n\n        JScrollPane scrollPane= new  JScrollPane(table);\n        scrollPane.setBounds(24, 66, 400, 330);\n\n        UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n        defaults.computeIfAbsent(\"Table.alternateRowColor\", k -> new Color(240, 240, 240));\n\n        JButton selectStoreButton = new JButton(\"Select Store\");\n        selectStoreButton.setBounds(24, 404, 400/3 - 4, 24);\n        selectStoreButton.addActionListener(e -> {\n            if(!table.getSelectionModel().isSelectionEmpty()) {\n                ArrayList<String> data = new ArrayList<>();\n                data.add(\"[getStore]\");\n                data.add(new JSONObject(table.getModel().getValueAt(table.getSelectedRow(), 2).toString()).getString(\"id\"));\n                Client.sendToServer(data);\n                JSONObject store = new JSONObject(Client.readFromServer(1).get(0));\n                editStore(store);\n            }\n\n        });\n\n        JButton addStore = new JButton(\"Add Store\");\n        addStore.setBounds(24 + 400/3 + 4, 404, 400/3 - 8, 24);\n        addStore.addActionListener(e -> addStore());\n\n        JButton removeStore = new JButton(\"Remove Store\");\n        removeStore.setBounds(24 + 400/3 * 2 + 4, 404, 400/3 - 4, 24);\n        removeStore.addActionListener(e -> {\n            if(!table.getSelectionModel().isSelectionEmpty()) {\n                int input = JOptionPane.showConfirmDialog(null, \"Are you sure you want to remove \" + table.getValueAt(table.getSelectedRow(), 0).toString() + \"?\");\n                if (input == 0) {\n                    ArrayList<String> data = new ArrayList<>();\n                    data.add(\"[removeStore]\");\n                    data.add(seller.getString(\"id\"));\n                    data.add(new JSONObject(table.getModel().getValueAt(table.getSelectedRow(), 2).toString()).getString(\"id\"));\n                    Client.sendToServer(data);\n\n                    ((DefaultTableModel)table.getModel()).removeRow(table.getSelectedRow());\n                }\n            }\n        });\n\n        storesPanel.add(storesLabel);\n        storesPanel.add(helpfulLabel);\n        storesPanel.add(scrollPane);\n\n        storesPanel.add(addStore);\n        storesPanel.add(selectStoreButton);\n        storesPanel.add(removeStore);\n\n        panel.add(storesPanel, BorderLayout.CENTER);\n        JSeparator divider = new JSeparator(JSeparator.VERTICAL);\n        divider.setBackground(Color.decode(\"#dbdbdb\"));\n        divider.setForeground(Color.decode(\"#dbdbdb\"));\n        panel.add(divider, BorderLayout.LINE_START);\n\n        return panel;\n    }\n\n    public JPanel settings(JPanel sidePanel) {\n        JPanel panel = new JPanel(new BorderLayout());\n        JPanel settingsPanel = new JPanel();\n        settingsPanel.setLayout(null);\n\n        JLabel accountDetailsLabel = new JLabel(\"Account Details\");\n        accountDetailsLabel.setFont(new Font(\"Serif\", Font.BOLD, 18));\n        accountDetailsLabel.setBounds(24, 16, 200, 24);\n\n        JLabel supportLabel = new JLabel(\"View your account details\");\n        supportLabel.setFont(new Font(\"serif\", Font.PLAIN, 14));\n        supportLabel.setBounds(24, 36, 400, 24);\n\n        JLabel usernameLabel = new JLabel(\"Username\");\n        usernameLabel.setBounds(24, 64, 200, 24);\n\n        JTextField usernameField = new JTextField(12);\n        usernameField.setBounds(24, 88, 268, 24);\n        usernameField.setText(seller.getString(\"username\"));\n\n        JButton usernameButton = new JButton(\"Change Username\");\n        usernameButton.setBounds(300, 88, 174, 24);\n        usernameButton.addActionListener(e -> {\n            ArrayList<String> data = new ArrayList<>();\n            data.add(\"[updateUserDetails]\");\n            data.add(seller.getString(\"id\"));\n            data.add(\"username\");\n            data.add(usernameField.getText());\n            Client.sendToServer(data);\n\n            for (Component jc : sidePanel.getComponents()) {\n                if (jc instanceof JTextArea) {\n                    ((JTextArea) jc).setText(\"Hey, \" + usernameField.getText());\n                }\n            }\n\n            JOptionPane.showMessageDialog (null, \"Username changed successfully!\", \"Updated Account Details\", JOptionPane.INFORMATION_MESSAGE);\n        });\n\n        settingsPanel.add(usernameLabel);\n        settingsPanel.add(usernameField);\n        settingsPanel.add(usernameButton);\n\n        JLabel emailLabel = new JLabel(\"Email\");\n        emailLabel.setBounds(24, 116, 200, 24);\n\n        JTextField emailField = new JTextField(12);\n        emailField.setBounds(24, 140, 268, 24);\n        emailField.setText(seller.getString(\"email\"));\n\n        JButton emailButton = new JButton(\"Change Email\");\n        emailButton.addActionListener(e -> {\n            ArrayList<String> data = new ArrayList<>();\n            data.add(\"[updateUserDetails]\");\n            data.add(seller.getString(\"id\"));\n            data.add(\"email\");\n            data.add(emailField.getText());\n            Client.sendToServer(data);\n\n            JOptionPane.showMessageDialog (null, \"Email changed successfully!\", \"Updated Account Details\", JOptionPane.INFORMATION_MESSAGE);\n        });\n\n        emailButton.setBounds(300, 140, 174, 24);\n\n        settingsPanel.add(emailLabel);\n        settingsPanel.add(emailField);\n        settingsPanel.add(emailButton);\n\n        JLabel passwordLabel = new JLabel(\"Password\");\n        passwordLabel.setBounds(24, 168, 200, 24);\n\n        JPasswordField passwordField = new JPasswordField(12);\n        passwordField.setBounds(24, 192, 268, 24);\n        passwordField.setText(seller.getString(\"password\"));\n\n        JButton passwordButton = new JButton(\"Change Password\");\n        passwordButton.setBounds(300, 192, 174, 24);\n        passwordButton.addActionListener(e -> {\n            ArrayList<String> data = new ArrayList<>();\n            data.add(\"[updateUserDetails]\");\n            data.add(seller.getString(\"id\"));\n            data.add(\"password\");\n            data.add(String.valueOf(passwordField.getPassword()));\n            Client.sendToServer(data);\n\n            JOptionPane.showMessageDialog (null, \"Password changed successfully!\", \"Updated Account Details\", JOptionPane.INFORMATION_MESSAGE);\n        });\n\n        settingsPanel.add(passwordLabel);\n        settingsPanel.add(passwordField);\n        settingsPanel.add(passwordButton);\n\n        JSeparator accountDetailsDivider = new JSeparator(JSeparator.HORIZONTAL);\n        accountDetailsDivider.setBounds(24, 240, 450,24);\n        accountDetailsDivider.setBackground(Color.decode(\"#dbdbdb\"));\n        accountDetailsDivider.setForeground(Color.decode(\"#dbdbdb\"));\n\n        JButton deleteAccountButton = new JButton(\"Delete Account\");\n        deleteAccountButton.setForeground(Color.decode(\"#d11111\"));\n        deleteAccountButton.setBounds(24, 264, 150, 24);\n        deleteAccountButton.addActionListener(e -> {\n            int option = JOptionPane.showConfirmDialog(null, \"Are you sure you want to delete your account?\", \"Account Removal\", JOptionPane.OK_CANCEL_OPTION);\n            if (option == 0) {\n                ArrayList<String> data = new ArrayList<>();\n                data.add(\"[deleteAccount]\");\n                data.add(seller.getString(\"id\"));\n                Client.sendToServer(data);\n                dispose();\n                new OnboardingPage(true);\n            }\n        });\n\n        settingsPanel.add(accountDetailsDivider);\n        settingsPanel.add(deleteAccountButton);\n\n        settingsPanel.add(accountDetailsLabel);\n        settingsPanel.add(supportLabel);\n\n        JSeparator divider = new JSeparator(JSeparator.VERTICAL);\n        divider.setBackground(Color.decode(\"#dbdbdb\"));\n        divider.setForeground(Color.decode(\"#dbdbdb\"));\n\n        panel.add(settingsPanel, BorderLayout.CENTER);\n        panel.add(divider, BorderLayout.LINE_START);\n\n        return panel;\n    }\n\n    public JPanel statistics() {\n        JPanel panel = new JPanel(new BorderLayout());\n        JPanel statisticsPanel = new JPanel();\n        statisticsPanel.setLayout(null);\n\n        JLabel statisticsLabel = new JLabel(\"Seller Statistics\");\n        statisticsLabel.setFont(new Font(\"Serif\", Font.BOLD, 18));\n        statisticsLabel.setBounds(24, 16, 200, 24);\n\n        JLabel supportLabel = new JLabel(\"View your sales statistics\");\n        supportLabel.setFont(new Font(\"serif\", Font.PLAIN, 14));\n        supportLabel.setBounds(24, 36, 400, 24);\n\n        statisticsPanel.add(statisticsLabel);\n        statisticsPanel.add(supportLabel);\n\n        JSeparator divider = new JSeparator(JSeparator.VERTICAL);\n        divider.setBackground(Color.decode(\"#dbdbdb\"));\n        divider.setForeground(Color.decode(\"#dbdbdb\"));\n\n        panel.add(statisticsPanel, BorderLayout.CENTER);\n        panel.add(divider, BorderLayout.LINE_START);\n\n        return panel;\n    }\n\n    public void addStore() {\n\n        // Create a dialog box with a text field and a button\n        String storeName = JOptionPane.showInputDialog(\"Enter store name (Must be less than 16 characters)\", \"Store\");\n        ArrayList<String> data = new ArrayList<>();\n\n        if(storeName != null) {\n            if (storeName.length() <= 16) {\n                System.out.println(\"User created store: \" + storeName);\n\n                data.add(\"[createStore]\");\n                data.add(seller.getString(\"id\"));\n                data.add(storeName);\n                Client.sendToServer(data);\n\n                String storeId = Client.readFromServer(1).get(0);\n\n                // Create a DefaultTableModel\n                DefaultTableModel model = (DefaultTableModel) table.getModel();\n                model.addRow(new Object[]{storeName, \"$0.00\", storeId});\n            } else {\n                Client.showErrorMessage(\"Store name cannot be more than 16 characters!\");\n            }\n\n        }\n\n    }\n\n    public void editStore(JSONObject store) {\n\n        JFrame storePage = new JFrame();\n\n        // Set title of window\n        storePage.setTitle(\"Store Details\");\n\n        // Set behavior to \"destroy\" window when closed\n        storePage.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n        // Set dimensions of application\n        storePage.setSize(640, 480);\n\n        // Does not allow user to resize window\n        storePage.setResizable(false);\n\n        // Set window to open in the center of the screen\n        storePage.setLocationRelativeTo(null);\n\n        storePage.setLayout(null);\n\n        DefaultTableModel model = new DefaultTableModel(){\n            @Override\n            public boolean isCellEditable(int row, int column)\n            {\n                // make read only fields except column 1 and 2\n                return column == 1 || column == 2;\n            }\n        };\n\n        // Add some data to the model\n        model.addColumn(\"Product Name\");\n        model.addColumn(\"Quantity\");\n        model.addColumn(\"Price\");\n        model.addColumn(\"Id\");\n\n        JSONArray products = store.getJSONArray(\"products\");\n\n        Client.sendToServer(new ArrayList<>(List.of(\"[getProducts]\")));\n\n        String allProductsString = Objects.requireNonNull(Client.readFromServer(1)).get(0);\n        JSONArray allProducts = new JSONArray(allProductsString);\n        ArrayList<String> productNames = new ArrayList<>();\n\n        if (allProductsString.equals(\"empty\"))\n            System.out.println(\"Store has no products\");\n        else {\n            for (Object productGeneric : allProducts) {\n                JSONObject productGenericObj = (JSONObject) productGeneric;\n                String storeGenericId = productGenericObj.getString(\"product_id\");\n\n                productNames.add(productGenericObj.getString(\"name\"));\n\n                for (Object product : products) {\n                    JSONObject productObj = (JSONObject) product;\n                    String productId = productObj.getString(\"id\");\n\n                    if (productId.equals(storeGenericId)) {\n                        productNames.remove(productGenericObj.getString(\"name\"));\n                        model.addRow(new Object[]{productGenericObj.getString(\"name\"), productObj.getInt(\"qty\"), String.format(\"$%.2f\", productObj.getDouble(\"price\")), productObj.getString(\"id\")});\n                    }\n                }\n            }\n        }\n\n        // Create a JTable using the model\n        JTable productTable = new JTable(model);\n\n        TableColumnModel tcm = productTable.getColumnModel();\n        tcm.removeColumn( tcm.getColumn(3) );\n\n\n        model.addTableModelListener(new TableModelListener() {\n            @Override\n            public void tableChanged(TableModelEvent e) {\n\n                int row = e.getFirstRow();\n                int column = e.getColumn();\n                String valueStr = productTable.getValueAt(row, column).toString();\n\n                ArrayList<String> data = new ArrayList<>();\n                data.add(\"[updateProduct]\");\n\n                data.add(store.getString(\"id\")); // Store id\n                data.add(model.getValueAt(row, 3).toString()); // Product id\n\n                // Type\n                switch (column) {\n                    case 1 -> {\n                        data.add(\"quantity\");\n                        data.add(valueStr);\n                    }\n                    case 2 -> {\n                        data.add(\"price\");\n                        data.add(valueStr.substring(1));\n                    }\n                }\n\n                Client.sendToServer(data);\n\n            }\n        });\n\n        JLabel titleMessage = new JLabel(store.getString(\"name\") + \"'s Products\");\n        titleMessage.setFont(new Font(\"serif\", Font.BOLD, 18));\n        titleMessage.setBounds(233, 24, 365, 24);\n\n        JLabel optionsTitle = new JLabel(\"Options\");\n        optionsTitle.setFont(new Font(\"serif\", Font.BOLD, 18));\n        optionsTitle.setBounds(24, 24, 200, 24);\n\n        JButton changeStoreName = new JButton(\"Change Store Name\");\n        changeStoreName.setBounds(24, 56, 185, 24);\n        changeStoreName.addActionListener(e -> {\n            String storeName = JOptionPane.showInputDialog(\"What would you like to change the name to?\");\n\n            if (storeName != null) {\n                if (storeName.length() <= 16) {\n\n                    boolean storeExists = false;\n                    Client.sendToServer(new ArrayList<>(List.of(\"[getStores]\")));\n                    String storesString = Client.readFromServer(1).get(0);\n                    JSONArray stores = new JSONArray(storesString);\n\n                    for (Object storeObj : stores) {\n                        if (((JSONObject) storeObj).getString(\"name\").equals(storeName)) {\n                            storeExists = true;\n                        }\n                    }\n\n                    if (storeExists) {\n                        Client.showErrorMessage(\"Store already exists!\");\n                    } else {\n                        ArrayList<String> data = new ArrayList<>();\n                        data.add(\"[changeStoreName]\");\n                        data.add(store.getString(\"id\"));\n                        data.add(storeName);\n                        Client.sendToServer(data);\n\n                        titleMessage.setText(storeName + \"'s Products\");\n                        table.getModel().setValueAt(storeName, table.getSelectedRow(), 0);\n                    }\n                } else {\n                    Client.showErrorMessage(\"Please enter a store name that is less than 16 characters!\");\n                }\n            }\n\n        });\n\n        JButton addProduct = new JButton(\"Add Product\");\n        addProduct.setBounds(24, 88, 185, 24);\n        addProduct.addActionListener(e -> {\n\n            String[] array = new String[productNames.size()];\n            for(int i = 0; i < array.length; i++) {\n                array[i] = productNames.get(i);\n            }\n            JComboBox productList = new JComboBox(array);\n            productList.setEditable(true);\n            AutoCompletion.enable(productList);\n\n            JTextField quantity = new JTextField();\n            JTextField price = new JTextField();\n            Object[] message = {\n                    \"Select a Product: \", productList,\n                    \"Quantity (1-99):\", quantity,\n                    \"Price: $\", price\n            };\n\n            int option = JOptionPane.showConfirmDialog(null, message, \"Add a product\", JOptionPane.OK_CANCEL_OPTION);\n\n            String productId = \"\";\n\n            if (option == JOptionPane.OK_OPTION) {\n\n                if (isValidQuantity(quantity.getText(), 100)) {\n                    if (isValidPrice(price.getText(), 1000000.00)) {\n                        String productName = Objects.requireNonNull(productList.getSelectedItem()).toString();\n\n                        for (Object product : allProducts) {\n                            JSONObject productObj = (JSONObject) product;\n                            if (productObj.getString(\"name\").equals(productName))\n                                productId = productObj.getString(\"product_id\");\n                        }\n\n                        ArrayList<String> data = new ArrayList<>();\n                        data.add(\"[addProduct]\");\n                        data.add(store.getString(\"id\"));\n                        data.add(productId);\n                        data.add(quantity.getText());\n                        data.add(price.getText());\n                        Client.sendToServer(data);\n\n                        model.addRow(new Object[]{productName, quantity.getText(), String.format(\"$%.2f\", Double.parseDouble(price.getText())), productId});\n                    } else {\n                        Client.showErrorMessage(\"Please enter a valid price. Must be less than $1,000,000\");\n                    }\n\n                } else {\n                    Client.showErrorMessage(\"Please enter a valid quantity!\");\n                }\n\n            } else {\n                System.out.println(\"Product addition canceled\");\n            }\n        });\n\n        JButton removeProduct = new JButton(\"Remove Product\");\n        removeProduct.setBounds(24, 120, 185, 24);\n        removeProduct.addActionListener(e -> {\n\n            if (!productTable.getSelectionModel().isSelectionEmpty()) {\n                int input = JOptionPane.showConfirmDialog(null, \"Are you sure you want to delete \" + productTable.getValueAt(productTable.getSelectedRow(), 0) + \"?\");\n                if (input == 0) {\n                    ArrayList<String> data = new ArrayList<>();\n                    data.add(\"[removeProduct]\");\n                    data.add(store.getString(\"id\"));\n                    data.add(productTable.getModel().getValueAt(productTable.getSelectedRow(), 3).toString());\n                    Client.sendToServer(data);\n                    ((DefaultTableModel)productTable.getModel()).removeRow(productTable.getSelectedRow());\n                }\n            }\n        });\n\n        JButton closeProduct = new JButton(\"Close\");\n        closeProduct.setBounds(24, 397, 185, 24);\n        closeProduct.addActionListener(e -> storePage.dispose());\n\n        JScrollPane sp= new  JScrollPane(productTable);\n        sp.setBounds(233, 56, 365, 365);\n\n        storePage.add(optionsTitle);\n        storePage.add(changeStoreName);\n        storePage.add(addProduct);\n        storePage.add(removeProduct);\n        storePage.add(closeProduct);\n        storePage.add(titleMessage);\n        storePage.add(sp);\n\n        storePage.setVisible(true);\n\n    }\n\n    public boolean isValidQuantity(String text, int limit) {\n        try {\n            return Integer.parseInt(text) < limit && Integer.parseInt(text) > 0;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    public boolean isValidPrice(String text, double limit) {\n        try {\n            return Double.parseDouble(text) < limit && Double.parseDouble(text) > 0;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Marketplace/Client-Side/src/SellerPage.java b/Marketplace/Client-Side/src/SellerPage.java
--- a/Marketplace/Client-Side/src/SellerPage.java	(revision 6d75570528f8a930d8d7b1daa7e80eb77072cbb4)
+++ b/Marketplace/Client-Side/src/SellerPage.java	(date 1702144201394)
@@ -584,6 +584,7 @@
 
                 int row = e.getFirstRow();
                 int column = e.getColumn();
+
                 String valueStr = productTable.getValueAt(row, column).toString();
 
                 ArrayList<String> data = new ArrayList<>();
